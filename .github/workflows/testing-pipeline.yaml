name: GitHub Actions - Provision Terraform
## on: [push]
on:
####----------------------------------------------------------------------------
  workflow_dispatch:
    name: 'Manual Deployment'
    description: 'Triggering Manual Deployment'
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Provision Terraform'
####----------------------------------------------------------------------------
  push:
    branches: [ master ]
    paths:
      - action.yaml
####----------------------------------------------------------------------------
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_DEFAULT_ACCOUNT: ${{ secrets.AWS_DEFAULT_ACCOUNT }}
  AWS_DEFAULT_PROFILE: default
  AWS_DEFAULT_REGION: us-east-1
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  DEVOPS_ACCESS_ROLE: DevOps--Custom-Access.Role
  DEVOPS_ACCOUNT_NAME: ${{ secrets.DEVOPS_ACCOUNT_NAME }}
  PRIVATE_KEYPAIR_FILE: .ssh/id_rsa
  PRIVATE_KEYPAIR_NAME: terraform
  PRIVATE_KEYPAIR_SECRET: ${{ secrets.PRIVATE_KEYPAIR_SECRET }}
  TARGET_WORKSPACE: dev
  TERRAFORM_DEPLOY_POLICY: true
  TERRAFORM_DESTROY_POLICY: true
  TERRAFORM_INPUT_PARAMS: ''
####----------------------------------------------------------------------------
jobs:
  provision-terraform:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
####----------------------------------------------------------------------------
      ## Requesting Credentials
      - name: Requesting Credentials
        uses: emvaldes/generate-credentials@master
        id: request-credentials
        with:
          aws-access-key-id: ${AWS_ACCESS_KEY_ID}
          aws-default-account: ${AWS_DEFAULT_ACCOUNT}
          aws-default-profile: ${AWS_DEFAULT_PROFILE}
          aws-default-region: ${AWS_DEFAULT_REGION}
          aws-secret-access-key: ${AWS_SECRET_ACCESS_KEY}
          devops-access-role: ${DEVOPS_ACCESS_ROLE}
          devops-account-name: ${DEVOPS_ACCOUNT_NAME}
          session-timestamp: 'DevOpsPipeline--20200827193000'
        continue-on-error: false
#       - name: Check On Failures
#         if: steps.request-credentials.outputs.status == 'failure'
#         run: |
#           echo -e "Warning: Requesting Credentials Failed [Status]: ${{ steps.request-credentials.outputs.status }}" ;
####----------------------------------------------------------------------------
      ## Provisioning Access
      - name: Provisioning Access
        uses: emvaldes/configure-access@master
        id: provision-access
        with:
          private-keypair-file: ${PRIVATE_KEYPAIR_FILE}
          private-keypair-secret: ${PRIVATE_KEYPAIR_SECRET}
        continue-on-error: false
#       - name: Check On Failures
#         if: steps.provision-access.outputs.status == 'failure'
#         run: |
#           echo -e "Warning: Provisioning Access Failed [Status]: ${{ steps.provision-access.outputs.status }}" ;
####----------------------------------------------------------------------------
      ## System Requirements
      - name: System Requirements
        uses: emvaldes/system-requirements@master
        id: system-requirements
        with:
          install-awscli-tool: true
          install-custom-tools: 'netcat'
          install-default-tools: true
          install-terraform-cli: latest
          update-operating-system: true
          update-python-version: true
        continue-on-error: false
#       - name: Check On Failures
#         if: steps.system-requirements.outputs.status == 'failure'
#         run: |
#           echo -e "Warning: System Requirements Failed [Status]: ${{ steps.system-requirements.outputs.status }}" ;
####----------------------------------------------------------------------------
      ## Installed Packages
      - name: Installed Packages
        id: installed-packages
        shell: bash
        run: |
          jq --version;
          terraform --version;
####----------------------------------------------------------------------------
      ## Terraform Parameters
      - name: Terraform Parameters
        id: terraform-parameters
        shell: bash
        run: |
          oIFS="${IFS}" ; IFS=$'\n' ;
          declare -a custom_params=(
              custom_timestamp=$(date +'%y%m%d%H%M%S')
              custom_engineer='Eduardo Valdes'
              custom_contact=emvaldes@hotmail.com
              custom_listset='["ami-abc123","ami-def456"]'
              custom_mapset='{"us-east-1":"ami-abc123","us-east-2":"ami-def456"}'
            ) ;
          echo -e "\nListing Encoding entries: ..." ;
          for xitem in ${custom_params[@]}; do
            encrypted=$(echo -en ${xitem} | base64 -w0 | tr -d '\n\r') ;
            decrypted=$(echo -en "${encrypted}" | base64 --decode) ;
            echo -e "${encrypted} -> ${decrypted}" ;
          done ;
          eval "echo '::set-env name=TERRAFORM_INPUT_PARAMS::$(
              for xitem in ${custom_params[@]}; do
                echo -en "`echo -en ${xitem} | base64 -w0 | tr -d '\n\r'`_" ;
              done | sed -e 's|\(.*\)\(\_\)$|\1|' ;
            )'" ;
          IFS="${oIFS}" ;
          eval "echo '::set-env name=TERRAFORM_INPUT_TFVARS::configs/${TARGET_WORKSPACE}-configs.tfvars'" ;
        continue-on-error: false
#       - name: Check On Failures
#         if: steps.terraform-parameters.outputs.status == 'failure'
#         run: |
#           echo -e "Warning: Terraform Parameters Failed [Status]: ${{ steps.terraform-parameters.outputs.status }}" ;
####----------------------------------------------------------------------------
      ## Provision Terraform
      - name: Provision Terraform
        uses: ./
        id: provision-terraform
        with:
          provision-terraform: true
          terraform-input-params: "${TERRAFORM_INPUT_PARAMS}"
          terraform-input-tfvars: "${TERRAFORM_INPUT_TFVARS}"
## Terraform Log-levels: TRACE, DEBUG, INFO, WARN or ERROR
          terraform-loglevel: false
        continue-on-error: false
#       - name: Check On Failures
#         if: steps.provision-terraform.outputs.status == 'failure'
#         run: |
#           echo -e "Warning: Provision Terraform Failed [Status]: ${{ steps.provision-terraform.outputs.status }}" ;
####----------------------------------------------------------------------------
      ## Deploy Terraform
      - name: Deploy Terraform
        uses: ./
        id: deploy-terraform
        with:
          deploy-terraform: true
## Terraform Log-levels: TRACE, DEBUG, INFO, WARN or ERROR
          terraform-loglevel: false
        continue-on-error: false
#       - name: Check On Failures
#         if: steps.deploy-terraform.outputs.status == 'failure'
#         run: |
#           echo -e "Warning: Deploy Terraform Failed [Status]: ${{ steps.deploy-terraform.outputs.status }}" ;
####----------------------------------------------------------------------------
      ## Backup Terraform
      - name: Backup Terraform
        uses: emvaldes/provision-terraform@master
        id: backup-terraform
        with:
          target-timestamp: $(date +"%y/%m/%d/%H%M%S")
          backup-terraform: true
        continue-on-error: false
#       - name: Check On Failures
#         if: steps.deploy-terraform.outputs.status == 'failure'
#         run: |
#           echo -e "Warning: Deploy Terraform Failed [Status]: ${{ steps.deploy-terraform.outputs.status }}" ;
####----------------------------------------------------------------------------
      ## Destroy Terraform
      - name: Destroy Terraform
        uses: ./
        id: destroy-terraform
        with:
          destroy-terraform: true
## Terraform Log-levels: TRACE, DEBUG, INFO, WARN or ERROR
          terraform-loglevel: false
        continue-on-error: false
#       - name: Check On Failures
#         if: steps.destroy-terraform.outputs.status == 'failure'
#         run: |
#           echo -e "Warning: Destroy Terraform Failed [Status]: ${{ steps.destroy-terraform.outputs.status }}" ;
###----------------------------------------------------------------------------
