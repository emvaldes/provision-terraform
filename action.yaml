name: 'Provision Terraform'
description: 'Provision Terraform (DevOps)'
####----------------------------------------------------------------------------
inputs:
  target-workspace:
    description: 'Define Terraform Workspace'
    required: false
    default: false
  target-timestamp:
    description: 'Define Terraform Time-Stamp'
    required: false
    default: false
  terraform-config:
    description: 'Define Terraform Configuration'
    required: false
    default: false
  terraform-tfstate:
    description: 'Define Terraform System-State'
    required: false
    default: false
  terraform-input-params:
    description: 'Define Terraform Input Parameters'
    required: false
    default: false
  terraform-input-tfvars:
    description: 'Define Terraform Input Variables'
    required: false
    default: false
  aws-default-account:
    description: 'Terraform AWS Default Account'
    required: false
    default: false
  aws-default-profile:
    description: 'Terraform AWS Default Profile'
    required: false
    default: false
  aws-default-region:
    description: 'Terraform AWS Default Region'
    required: false
    default: false
  aws-access-key-id:
    description: 'Terraform AWS Access Key-ID'
    required: false
    default: false
  aws-secret-access-key:
    description: 'Terraform AWS Secret Access Key'
    required: false
    default: false
  provision-terraform:
    description: 'Provision Terraform Provisioning'
    required: false
    default: false
  deploy-terraform:
    description: 'Deploy Terraform Infrastructure'
    required: false
    default: false
  backup-terraform:
    description: 'Backup Terraform Infrastructure'
    required: false
    default: false
  destroy-terraform:
    description: 'Destroy Terraform Infrastructure'
    required: false
    default: false
  private-keypair-name:
    description: 'Terraform Private Key-Name'
    required: false
    default: false
  private-keypair-file:
    description: 'Terraform Private Key-File'
    required: false
    default: false
  terraform-loglevel:
    description: 'Define Terraform Loglevel'
    required: false
    default: false
####----------------------------------------------------------------------------
##  outputs:
####----------------------------------------------------------------------------
runs:
  using: "composite"
  steps:
    ####------------------------------------------------------------------------
    ## System Requirements
    - name: Provision Terraform
      id: provision-terraform
      shell: bash
      run: |
        export completion="Skipping ...! ";
        ####--------------------------------------------------------------------
        target_timestamp="${{ inputs.target-timestamp }}" ;
        [[ ${target_timestamp} == false ]] && {
            target_timestamp="$(date +"%y%m%d%H%M%S")" ;
          } ;
        target_workspace="${{ inputs.target-workspace }}" ;
        [[ ${target_workspace} == false ]] && {
            target_workspace="${TARGET_WORKSPACE}" ;
          } ;
        ####--------------------------------------------------------------------
        ## Parsing AWS Default values:
        aws_default_profile="${{ inputs.aws-default-profile }}" ;
        [[ ${aws_default_profile} == false ]] && {
            aws_default_profile="${AWS_DEFAULT_PROFILE}" ;
          } ;
        aws_default_account="${{ inputs.aws-default-account }}" ;
        [[ ${aws_default_account} == false ]] && {
            aws_default_account="${AWS_DEFAULT_ACCOUNT}" ;
          } ;
        aws_default_region="${{ inputs.aws-default-region }}" ;
        [[ ${aws_default_region} == false ]] && {
            aws_default_region="${AWS_DEFAULT_REGION}" ;
          } ;
        ####--------------------------------------------------------------------
        ##  Parsing AWS Credentials:
        aws_access_key_id="${{ inputs.aws-access-key-id }}" ;
        [[ ${aws_access_key_id} == false ]] && {
            aws_access_key_id="${AWS_ACCESS_KEY_ID}" ;
          } ;
        aws_secret_access_key="${{ inputs.aws-secret-access-key }}" ;
        [[ ${aws_secret_access_key} == false ]] && {
            aws_secret_access_key="${AWS_SECRET_ACCESS_KEY}" ;
          } ;
        ####--------------------------------------------------------------------
        ## Parsing Private KeyPair items:
        keypair_name="${{ inputs.private-keypair-name }}" ;
        [[ ${keypair_name} == false ]] && {
            keypair_name="${PRIVATE_KEYPAIR_NAME}" ;
          } ;
        keypair_file="${{ inputs.private-keypair-file }}" ;
        [[ ${keypair_file} == false ]] && {
            keypair_file="${PRIVATE_KEYPAIR_FILE}" ;
          } ;
        ####--------------------------------------------------------------------
        export terraform_tfstate="${{ github.workspace }}/terraform.tfstate.d" ;
        export terraform_s3bucket="terraform-states-${aws_default_account}" ;
        export terraform_planfile="terraform" ;
        export terraform_tfplan="${terraform_tfstate}/${target_workspace}/${terraform_planfile}.tfplan" ;
        ####--------------------------------------------------------------------
        export terraform_verbosity="${{ inputs.terraform-loglevel }}" ;
        if [[ ${terraform_verbosity} != false ]]; then
                  terraform_verbosity="TF_LOG=${{ inputs.terraform-logLevel }}";
            else  terraform_verbosity='';
        fi; ## echo -e "\nTerraform Loglevel: ${terraform_verbosity}";
        ####--------------------------------------------------------------------
        ## Terraform Log-levels: TRACE, DEBUG, INFO, WARN or ERROR
        export terraform_loglevel="${{ inputs.terraform-loglevel }}" ;
        ####--------------------------------------------------------------------
        if [[ ${{ inputs.provision-terraform }} == true ]]; then
          eval ${terraform_verbosity} \
          terraform init ;
          ####------------------------------------------------------------------
          eval ${terraform_verbosity} \
          terraform workspace new ${target_workspace} ;
          ####------------------------------------------------------------------
          eval ${terraform_verbosity} \
          terraform fmt -check ;
          ####------------------------------------------------------------------
          eval ${terraform_verbosity} \
          terraform validate ;
          ####------------------------------------------------------------------
          completion="Completed!";
        fi;
        ####--------------------------------------------------------------------
        if [[ ${{ inputs.provision-terraform }} == true ]]; then
          input_params="${{ inputs.terraform-input-params }}";
          [[ ${input_params} == false ]] && input_params='' ;
          oIFS="${IFS}"; IFS='_';
          if [[ ${#input_params[@]} -gt 0 ]]; then
            echo -e "Terraform Custom Parameters:";
            for encoded in ${input_params[@]}; do
              decoded="$(echo -en ${encoded} | base64 --decode)";
              echo -e "${encoded} -> ${decoded}";
            done; echo -e;
          fi;
          IFS="${oIFS}" ;
          ####------------------------------------------------------------------
          input_tfvars="${{ inputs.terraform-input-tfvars }}";
          [[ ${input_tfvars} == false ]] && input_tfvars='' ;
          custom_tfvars='';
          if [[ ${#input_tfvars} -gt 0 ]]; then
            tfvars_file="${{ github.workspace }}/${input_tfvars}";
            custom_message="Custom Terraform Variables file [${input_tfvars}]";
            if [[ -e ${tfvars_file} ]]; then
                    echo -e "Listing ${custom_message}:";
                    ls -al ${tfvars_file}; echo -e;
                    custom_tfvars="-var-file=\"${tfvars_file}\"" ;
              else  echo -e "Notice: ${custom_message} does not exit! \n";
            fi;
          fi;
          ####------------------------------------------------------------------
          echo -e "Terraform Output Plan: ${terraform_tfplan}\n" ;
          custom_message="Private-KeyPair File: [${keypair_file}]";
          if [[ -e ${keypair_file} ]]; then
                  echo -e "Listing ${custom_message}:";
                  ls -al ${keypair_file} ; echo -e;
            else  echo -e "Warning: ${custom_message} does not exit! \n";
                  exit 1;
          fi;
          echo -e "Private-KeyPair Name: ${keypair_name}" ; echo -e;
          ####------------------------------------------------------------------
          ## Displaying Terraform Plan comand:
          echo -e "Listing Terraform Plan command:\n";
          echo terraform plan \
                    -var="region=${aws_default_region}" \
                    -var="aws_access_key=${aws_access_key_id}" \
                    -var="aws_secret_key=${aws_secret_access_key}" \
                    -var="private_keypair_file=${keypair_file}" \
                    -var="private_keypair_name=${keypair_name}" \
                    $(
                      oIFS="${IFS}"; IFS='_';
                      for param in ${input_params[@]}; do
                        echo "-var=\"$(echo -en ${param} | base64 --decode)\"";
                      done;
                      IFS="${oIFS}" ;
                    ) \
                    ${custom_tfvars} \
                    -out ${terraform_tfplan} \
          ; echo -e;
          ####------------------------------------------------------------------
          eval ${terraform_verbosity} \
          terraform plan \
                    -var="region=${aws_default_region}" \
                    -var="aws_access_key=${aws_access_key_id}" \
                    -var="aws_secret_key=${aws_secret_access_key}" \
                    -var="private_keypair_file=${keypair_file}" \
                    -var="private_keypair_name=${keypair_name}" \
                    $(
                      oIFS="${IFS}"; IFS='_';
                      for param in ${input_params[@]}; do
                        echo "-var=\"$(echo -en ${param} | base64 --decode)\"";
                      done;
                      IFS="${oIFS}" ;
                    ) \
                    ${custom_tfvars} \
                    -out ${terraform_tfplan} \
          ;
          ####------------------------------------------------------------------
          export provisioned_terraform=${?};
          echo "::set-output name=provisioned-terraform::${provisioned_terraform}" ;
          echo "::set-env name=PROVISIONED_TERRAFORM::${provisioned_terraform}" ;
          ####------------------------------------------------------------------
          completion="Completed!";
        fi;
        ####--------------------------------------------------------------------
        if [[ ${{ inputs.deploy-terraform }} == true ]]; then
          custom_message="Terraform Input Plan: [${terraform_tfplan}]";
          if [[ -e ${terraform_tfplan} ]]; then
                  echo -e "Listing ${custom_message}:";
                  ls -al ${terraform_tfplan} ; echo -e;
            else  echo -e "Notice: ${custom_message} does not exit! \n";
                  exit 1;
          fi;
          ## Deploying Terraform Plan (infrastructure)
          eval ${terraform_verbosity} \
          terraform apply \
                    -auto-approve \
                    -compact-warnings \
                    ${terraform_tfplan} \
          ;
          ####------------------------------------------------------------------
          export deployed_terraform=${?};
          echo "::set-output name=deployed-terraform::${deployed_terraform}" ;
          echo "::set-env name=DEPLOYED_TERRAFORM::${deployed_terraform}" ;
          ####------------------------------------------------------------------
          completion="Completed!";
        fi;
        ####--------------------------------------------------------------------
        if [[ ${{ inputs.terraform-config }} == true ]]; then
          eval ${terraform_verbosity} \
          terraform show | tee ${terraform_tfstate}/${target_workspace}/terraform.show ;
          ####------------------------------------------------------------------
          completion="Completed!";
        fi;
        ####--------------------------------------------------------------------
        if [[ ${{ inputs.terraform-tfstate }} == true ]]; then
          tree ${terraform_tfstate} ;
          target_state="$(find ${terraform_tfstate} -type f -name terraform.tfstate | head -n1)" ;
          echo -e "\nDisplaying Terraform State: ${target_state}" ;
          cat ${target_state} ;
          ####------------------------------------------------------------------
          completion="Completed!";
        fi;
        ####--------------------------------------------------------------------
        if [[ ${{ inputs.backup-terraform }} == true ]]; then
          terraform_s3bucket="terraform-states-${aws_default_account}";
          terraform_tfstate="${{ github.workspace }}/terraform.tfstate.d";
          terraform_modules="${{ github.workspace }}/.terraform";
          custom_filepath="${target_timestamp:0:2}/${target_timestamp:2:2}/${target_timestamp:4:2}/${target_timestamp:6:6}";
          target_buildset="${target_workspace}/${custom_filepath}/$(git rev-parse --short HEAD)";
          echo -e "\nCreating Target Build-Set Container ... [ ${target_buildset} ]";
          mkdir -p ${target_buildset} ;
          echo -e "\nTransferring terraform components to container ...\n";
          cp -r ${terraform_tfstate} ${target_buildset}/ | cut -d ' ' -f2- ;
          cp -r ${terraform_modules} ${target_buildset}/ | cut -d ' ' -f2- ;
          ## find ${target_buildset}/.terraform/modules -type d -name .git | xargs -I {} rm -rf {} ;
          rm -rf ${target_buildset}/.terraform/modules;
          tree ${target_buildset};
          s3bucket_remotepath="${target_buildset}" ;
          echo -e "\nTransferring Terraform State @ Local-Storage ... ${terraform_s3bucket}" ;
          aws --profile ${aws_default_profile} \
              --region ${aws_default_region} \
              s3 cp ${target_buildset} s3://${terraform_s3bucket}/${s3bucket_remotepath}/ \
              --recursive --only-show-errors;
          echo -e "\nListing Terraform State @ AWS S3 Bucket ... ${terraform_s3bucket}\n" ;
          aws --profile ${aws_default_profile} \
              --region ${aws_default_region} \
              s3 ls s3://${terraform_s3bucket}/${s3bucket_remotepath}/ \
              --recursive;
          oIFS="${IFS}"; IFS=$'\n';
          terraform_restore="/tmp/terraform/restore/${target_buildset}";
          declare -a restore_state=();
          restore_state+=("\nHow-To Restore Terraform Infrastructure State:\n");
          restore_state+=("> mkdir -p ${terraform_restore} ;");
          restore_state+=("> git clone $(git config --get remote.origin.url) ${terraform_restore} ;");
          restore_state+=("> cd ${terraform_restore} ;");
          restore_state+=("> git checkout -b restore $(git rev-parse HEAD) ;");
          restore_state+=("> aws --profile ${aws_default_profile} --region ${aws_default_region} s3 cp s3://${terraform_s3bucket}/${target_buildset} . --recursive ;");
          restore_state+=("> terraform apply ${terraform_restore}/terraform.tfstate.d/${target_workspace}/terraform.tfplan ;");
          for xline in ${restore_state[@]}; do echo -e "${xline}"; done;
          IFS="${oIFS}";
        fi;
        ####--------------------------------------------------------------------
        if [[ ${{ inputs.destroy-terraform }} == true ]]; then
          ## Destroying Terraform deployed infrastructure
          eval ${terraform_verbosity} \
          terraform destroy \
                    -auto-approve \
          ;
          export destroyed_terraform=${?};
          ####------------------------------------------------------------------
          echo "::set-output name=destroyed-terraform::${destroyed_terraform}" ;
          echo "::set-env name=DESTROYED_TERRAFORM::${destroyed_terraform}" ;
          ####------------------------------------------------------------------
          completion="Completed!";
        fi;
        ####--------------------------------------------------------------------
        echo -e "\n${completion} " ;
