name: 'Provision Terraform'
description: 'Provision Terraform (DevOps)'
####----------------------------------------------------------------------------
inputs:
  target-account:
    description: 'Define Terraform Target-Account'
    required: false
    default: false
  target-region:
    description: 'Define Terraform Target-Region'
    required: false
    default: false
  target-workspace:
    description: 'Define Terraform Workspace'
    required: false
    default: false
  terraform-config:
    description: 'Define Terraform Configuration'
    required: false
    default: false
  terraform-tfstate:
    description: 'Define Terraform System-State'
    required: false
    default: false
  terraform-input-params:
    description: 'Define Terraform Input Parameters'
    required: false
    default: false
  terraform-input-tfvars:
    description: 'Define Terraform Input Variables'
    required: false
    default: false
  aws-access-key-id:
    description: 'Terraform AWS Access Key-ID'
    required: false
    default: false
  aws-secret-access-key:
    description: 'Terraform AWS Secret Access Key'
    required: false
    default: false
  provision-terraform:
    description: 'Provision Terraform Provisioning'
    required: false
    default: false
  deploy-terraform:
    description: 'Deploy Terraform Infrastructure'
    required: false
    default: false
  destroy-terraform:
    description: 'Destroy Terraform Infrastructure'
    required: false
    default: false
  private-keypair-name:
    description: 'Terraform Private Key-Name'
    required: false
    default: false
  private-keypair-file:
    description: 'Terraform Private Key-File'
    required: false
    default: false
  terraform-loglevel:
    description: 'Define Terraform Loglevel'
    required: false
    default: false
####----------------------------------------------------------------------------
##  outputs:
####----------------------------------------------------------------------------
runs:
  using: "composite"
  steps:
    ####------------------------------------------------------------------------
    ## System Requirements
    - name: Provision Terraform
      id: provision-terraform
      shell: bash
      run: |
        ####--------------------------------------------------------------------
        ##  Parsing AWS Credentials:
        aws_access_key_id="${{ inputs.aws-access-key-id }}" ;
        [[ ${aws_access_key_id} == false ]] && {
            aws_access_key_id="${AWS_ACCESS_KEY_ID}" ;
          } ;
        aws_secret_access_key="${{ inputs.aws-secret-access-key }}" ;
        [[ ${aws_secret_access_key} == false ]] && {
            aws_secret_access_key="${AWS_SECRET_ACCESS_KEY}" ;
          } ;
        ####--------------------------------------------------------------------
        ## Parsing Private KeyPair items:
        private_keypair_name="${{ inputs.private-keypair-name }}" ;
        [[ ${private_keypair_name} == false ]] && {
            private_keypair_name="${PRIVATE_KEYPAIR_NAME}" ;
          } ;
        private_keypair_file="${{ inputs.private-keypair-file }}" ;
        [[ ${private_keypair_file} == false ]] && {
            private_keypair_file="${PRIVATE_KEYPAIR_FILE}" ;
          } ;
        ####--------------------------------------------------------------------
        ## Terraform Infrastructure As Code (IaC):
        target_account="${{ inputs.target-account }}" ;
        [[ ${target_account} == false ]] && {
            target_account="${AWS_DEFAULT_ACCOUNT}" ;
          } ;
        target_region="${{ inputs.target-region }}" ;
        [[ ${target_region} == false ]] && {
            target_region="${AWS_DEFAULT_REGION}" ;
          } ;
        target_workspace="${{ inputs.target-workspace }}" ;
        [[ ${target_workspace} == false ]] && {
            target_workspace="${TARGET_WORKSPACE}" ;
          } ;
        ####--------------------------------------------------------------------
        export terraform_tfstate="${{ github.workspace }}/terraform.tfstate.d" ;
        export terraform_s3bucket="terraform-states-${target_account}" ;
        export terraform_planfile="terraform" ;
        export terraform_tfplan="${terraform_tfstate}/${target_workspace}/${terraform_planfile}.tfplan" ;
        ####--------------------------------------------------------------------
        export terraform_verbosity="${{ inputs.terraform-loglevel }}" ;
        [[ ${terraform_verbosity} != false ]] && {
            terraform_verbosity="TF_LOG=${{ inputs.terraform-logLevel }}";
          } ; echo -e "\nTerraform Loglevel: ${terraform_verbosity}";
        ####--------------------------------------------------------------------
        ## Terraform Log-levels: TRACE, DEBUG, INFO, WARN or ERROR
        export terraform_loglevel="${{ inputs.terraform-loglevel }}" ;
        ####--------------------------------------------------------------------
        if [[ ${{ inputs.provision-terraform }} == true ]]; then
          ${terraform_verbosity} \
          terraform init ;
          ####------------------------------------------------------------------
          ${terraform_verbosity} \
          terraform workspace new ${target_workspace} ;
          ####------------------------------------------------------------------
          ${terraform_verbosity} \
          terraform fmt -check ;
          ####------------------------------------------------------------------
          ${terraform_verbosity} \
          terraform validate ;
        fi;
        ####--------------------------------------------------------------------
        if [[ ${{ inputs.provision-terraform }} == true ]]; then
          input_params="${{ inputs.terraform-input-params }}";
          [[ ${input_params} == false ]] && input_params='' ;
          oIFS="${IFS}"; IFS='_';
          if [[ ${#input_params[@]} -gt 0 ]]; then
            echo -e "Terraform Custom Parameters:";
            for encoded in ${input_params[@]}; do
              decoded="$(echo -en ${encoded} | base64 --decode)";
              echo -e "${encoded} -> ${decoded}";
            done; echo -e;
          fi;
          IFS="${oIFS}" ;
          ####------------------------------------------------------------------
          input_tfvars="${{ inputs.terraform-input-tfvars }}";
          [[ ${input_tfvars} == false ]] && input_tfvars='' ;
          custom_tfvars='';
          if [[ ${#input_tfvars} -gt 0 ]]; then
            tfvars_file="${{ github.workspace }}/${input_tfvars}";
            custom_message="Custom Terraform Variables file [${input_tfvars}]";
            if [[ -e ${tfvars_file} ]]; then
                    echo -e "Listing ${custom_message}:";
                    ls -al ${tfvars_file}; echo -e;
                    custom_tfvars="-var-file=\"${tfvars_file}\"" ;
              else  echo -e "Notice: ${custom_message} does not exit! \n";
            fi;
          fi;
          ####------------------------------------------------------------------
          echo -e "Terraform Output Plan: ${terraform_tfplan}\n" ;
          custom_message="Private-KeyPair File: [${private_keypair_file}]";
          if [[ -e ${private_keypair_file} ]]; then
                  echo -e "Listing ${custom_message}:";
                  ls -al ${private_keypair_file} ; echo -e;
            else  echo -e "Warning: ${custom_message} does not exit! \n";
                  exit 1;
          fi;
          echo -e "Private-KeyPair Name: ${private_keypair_name}" ; echo -e;
          eval \
          ${terraform_verbosity} \
          terraform plan \
                    -var="region=${target_region}" \
                    -var="aws_access_key=${aws_access_key_id}" \
                    -var="aws_secret_key=${aws_secret_access_key}" \
                    -var="private_keypair_file=${private_keypair_file}" \
                    -var="private_keypair_name=${private_keypair_name}" \
                    $(
                      oIFS="${IFS}"; IFS='_';
                      for param in ${input_params[@]}; do
                        echo "-var=\"$(echo -en ${param} | base64 --decode)\"";
                      done;
                      IFS="${oIFS}" ;
                    ) \
                    ${custom_tfvars} \
                    -out ${terraform_tfplan} \
          ;
          ####------------------------------------------------------------------
          export provisioned_terraform=${?};
          echo "::set-output name=provisioned-terraform::${provisioned_terraform}" ;
          echo "::set-env name=PROVISIONED_TERRAFORM::${provisioned_terraform}" ;
          ####------------------------------------------------------------------
        fi;
        ####--------------------------------------------------------------------
        if [[ ${{ inputs.deploy-terraform }} == true ]]; then
          custom_message="Terraform Input Plan: [${terraform_tfplan}]";
          if [[ -e ${terraform_tfplan} ]]; then
                  echo -e "Listing ${custom_message}:";
                  ls -al ${terraform_tfplan} ; echo -e;
            else  echo -e "Notice: ${custom_message} does not exit! \n";
                  exit 1;
          fi;
          ## Deploying Terraform Plan (infrastructure)
          ${terraform_verbosity} \
          terraform apply \
                    -auto-approve \
                    -compact-warnings \
                    ${terraform_tfplan} \
          ;
          ####------------------------------------------------------------------
          export deployed_terraform=${?};
          echo "::set-output name=deployed-terraform::${deployed_terraform}" ;
          echo "::set-env name=DEPLOYED_TERRAFORM::${deployed_terraform}" ;
          ####------------------------------------------------------------------
        fi;
        ####--------------------------------------------------------------------
        if [[ ${{ inputs.terraform-config }} == true ]]; then
          ${terraform_verbosity} \
          terraform show | tee ${terraform_tfstate}/${target_workspace}/terraform.show ;
        fi;
        ####--------------------------------------------------------------------
        if [[ ${{ inputs.terraform-tfstate }} == true ]]; then
          tree ${terraform_tfstate} ;
          target_state="$(find ${terraform_tfstate} -type f -name terraform.tfstate | head -n1)" ;
          echo -e "\nDisplaying Terraform State: ${target_state}" ;
          cat ${target_state} ;
        fi;
        ####--------------------------------------------------------------------
        if [[ ${{ inputs.destroy-terraform }} == true ]]; then
          ## Destroying Terraform deployed infrastructure
          ${terraform_verbosity} \
          terraform destroy \
                    -auto-approve \
          ;
          export destroyed_terraform=${?};
          ####------------------------------------------------------------------
          echo "::set-output name=destroyed-terraform::${destroyed_terraform}" ;
          echo "::set-env name=DESTROYED_TERRAFORM::${destroyed_terraform}" ;
          ####------------------------------------------------------------------
        fi;
        ####--------------------------------------------------------------------
        echo -e "\nCompleted! " ;
